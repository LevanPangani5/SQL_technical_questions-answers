
--q1: Write an SQL query that reports the first login date for each player

--q2: Write a SQL query that reports the device that is first logged in for each player

--q3: Write an SQL query that reports for each player and date, how many games played so far by the player. 
--That is, the total number of games played by the player until that date.

--q4: Write an SQL query that reports the fraction of players that logged in again 
 on the day after the day they first logged in, rounded to 2 decimal places

script:
create table activity (

 player_id     int     ,
 device_id     int     ,
 event_date    date    ,
 games_played  int
 );

 insert into activity values (1,2,'2016-03-01',5 ),(1,2,'2016-03-02',6 ),(2,3,'2017-06-25',1 )
 ,(3,1,'2016-03-02',0 ),(3,4,'2018-07-03',5 );

 select * from activity;

solution:

--sart question 1-2
with cte as (select *, 
rank() over(partition by player_id order by event_date) as rn
from activity)

select player_id,device_id, event_date from cte
where rn =1
--end quesion 1-2

--start question 3
select *,
sum(games_played) over(partition by player_id order by event_date) as games_played
from activity
--using rows and range
select *,
sum(games_played) over(partition by player_id order by player_id rows between unbounded preceding and 0 preceding) as games_played
from activity
--end quesion 3

--start question 4
with cte as (select *,
rank() over (partition by player_id order by event_date) as rn
from activity )
--, cte2 as(
select player_id,
max(case when rn =1 then event_date end)as first_login,
max(case when rn =2 then event_date end)as second_login
from cte
group by player_id)

select player_id,
case when dateadd(day,1,first_login) = second_login then 'Yes' else 'No' end as cosecutive_second_login
from cte2

--solution using joins
with cte as(select player_id, min(event_date) as first_login 
from activity
group by player_id)

select c.player_id from activity a
inner join cte c on c.player_id=a.player_id 
where datediff(day,c.first_login,a.event_date)=1
--end question 4


